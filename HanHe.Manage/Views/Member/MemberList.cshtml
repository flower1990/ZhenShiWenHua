@model IEnumerable<HanHe.Model.Zs_Member>

@{
    ViewBag.Title = "会员列表";
    ViewBag.Forms = "会员列表";
    ViewBag.Elements = "会员列表";
    ViewBag.FormsUrl = Url.Action("MemberList", "Member");
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<form id="form1">
    <table id="grid-table"></table>

    <div id="grid-pager"></div>
</form>

@section Scripts {
    <script type="text/javascript">
        jQuery(function ($) {
            var grid_selector = "#grid-table";
            var pager_selector = "#grid-pager";

            jQuery(grid_selector).jqGrid({
                caption: "会员列表",
                url: '@Url.Action("GetData", "Member")',
                editurl: "@Url.Action("Edit", "Member")",
                datatype: "json",
                colNames: ['操作', '编号', '会员标识', '姓名', '昵称', '密码', '性别', '证件类别', '证件编号', '阳历生日', '阴历生日', '生日类别', '预期寿命', '手机', '邮箱', 'QQ', '微信', '新浪', '地址', '邮编', '国家', '省份', '城市', '区域', '头像', '签名', '备注信息', '创建时间', '更新时间', '状态', '激活日期', '删除状态', '删除日期'],
                colModel: [
                    {
                        name: 'myac', index: '操作', width: 80, fixed: true, sortable: false, resize: false,
                        formatter: 'actions',
                        formatoptions: {
                            keys: true,
                            delOptions: { recreateForm: true, beforeShowForm: beforeDeleteCallback },
                            //editformbutton: true, editOptions: { recreateForm: true, beforeShowForm: beforeEditCallback }
                        }
                    },
                    { name: 'MID', index: 'MID', hidden: true, width: 90, editable: false, edittype: "text" },
                    { name: 'MCode', index: 'MCode', width: 90, editable: false, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'MName', index: 'MName', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'NickName', index: 'NickName', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'Pwd', index: 'Pwd', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'Sex', index: 'Sex', width: 90, editable: true, edittype: "select", formatter: "select", editoptions: { value: "1:先生;2:女士;" }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'IDType', index: 'IDType', width: 90, editable: true, edittype: "select", formatter: "select", editoptions: { value: "1:身份证;2:军官证;" }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'IDCode', index: 'IDCode', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'BirthdayCn', index: 'BirthdayCn', width: 90, editable: true, edittype: "text", unformat: pickDate, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'BirthdayEn', index: 'BirthdayEn', width: 90, editable: true, edittype: "text", unformat: pickDate, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'CalendarType', index: 'CalendarType', width: 90, editable: true, eedittype: "select", formatter: "select", editoptions: { value: "1:先生;2:女士;" }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'MyLife', index: 'MyLife', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'Mobile', index: 'Mobile', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'Email', index: 'Email', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'QQ', index: 'QQ', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'WeiXin', index: 'WeiXin', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'Sina', index: 'Sina', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'Address', index: 'Address', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'PostCode', index: 'PostCode', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'CountryID', index: 'CountryID', width: 90, editable: true, edittype: "select", editoptions: { value: "1:中国;2:外国;" }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'ProvinceID', index: 'ProvinceID', width: 90, editable: true, edittype: "select", editoptions: { value: "1:河南省;2:河北省;" }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'CityID', index: 'CityID', width: 90, editable: true, edittype: "select", editoptions: { value: "1:郑州市;2:洛阳市;" }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'AreaID', index: 'AreaID', width: 90, editable: true, edittype: "select", editoptions: { value: "1:二七区;2:中原区;" }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'IconUrl', index: 'IconUrl', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'MySign', index: 'MySign', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'Remark', index: 'Remark', width: 90, editable: true, edittype: "text", searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'CreateDate', index: 'CreateDate', width: 90, editable: false, formatter: 'date', formatoptions: { newformat: 'Y/m/d' }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'UpdateDate', index: 'UpdateDate', width: 90, editable: false, formatter: 'date', formatoptions: { newformat: 'Y/m/d' }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'MStatus', index: 'MStatus', width: 90, editable: true, edittype: "select", formatter: "select", editoptions: { value: "0:未激活;1:激活;-1:无效;" }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'ActDate', index: 'ActDate', width: 90, editable: false, edittype: "text", unformat: pickDate, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'DelStatus', index: 'DelStatus', width: 90, editable: true, edittype: "select", formatter: "select", editoptions: { value: "0:已删除;1:有效的;" }, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                    { name: 'DelDate', index: 'DelDate', width: 90, editable: false, edittype: "text", unformat: pickDate, searchoptions: { sopt: ['eq', 'ne', 'cn'] } },
                ],
                height: 360,
                rowNum: 10,
                rowList: [10, 20, 30],
                pager: pager_selector,
                sortname: 'MID',
                altRows: true,
                autowidth: true,
                multiselect: true,
                multiboxonly: true,
                viewrecords: true,
                shrinkToFit: false,
                autoScroll: false,
                //toppager: true,
                //multikey: "ctrlKey",
                gridComplete: function () {
                    var icons = $(".ui-icon-trash");//隐藏删除键
                    icons.hide();
                },
                loadComplete: function () {
                    var table = this;
                    setTimeout(function () {
                        styleCheckbox(table);
                        updateActionIcons(table);
                        updatePagerIcons(table);
                        enableTooltips(table);
                    }, 0);
                },
                serializeDelData: function (postdata) {
                    var rowdata = jQuery(grid_selector).getRowData(postdata.id);
                    return { id: postdata.id, oper: postdata.oper, user: rowdata };
                }
            });

            //enable search/filter toolbar
            //jQuery(grid_selector).jqGrid('filterToolbar',{defaultSearch:true,stringResult:true})

            //switch element when editing inline
            function aceSwitch(cellvalue, options, cell) {
                setTimeout(function () {
                    $(cell).find('input[type=checkbox]')
                            .wrap('<label class="inline" />')
                        .addClass('ace ace-switch ace-switch-5')
                        .after('<span class="lbl"></span>');
                }, 0);
            }
            //enable datepicker
            function pickDate(cellvalue, options, cell) {
                setTimeout(function () {
                    $(cell).find('input[type=text]')
                            .datepicker({ format: 'yyyy-mm-dd', autoclose: true });
                }, 0);
            }

            //navButtons
            jQuery(grid_selector).jqGrid('navGrid', pager_selector,
                {
                    //navbar options
                    edit: true,
                    editicon: 'icon-pencil blue',
                    add: true,
                    addicon: 'icon-plus-sign purple',
                    del: false,
                    delicon: 'icon-trash red',
                    search: true,
                    searchicon: 'icon-search orange',
                    refresh: true,
                    refreshicon: 'icon-refresh green',
                    view: true,
                    viewicon: 'icon-zoom-in grey',
                },
                {
                    //edit record form
                    url: '@Url.Action("Edit", "Member")',
                    closeAfterEdit: true,
                    recreateForm: true,
                    beforeShowForm: function (e) {
                        var form = $(e[0]);
                        form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                        style_edit_form(form);
                    }
                },
                {
                    //new record form
                    url: '@Url.Action("Create", "Member")',
                    closeAfterAdd: false,
                    recreateForm: true,
                    viewPagerButtons: false,
                    beforeShowForm: function (e) {
                        var form = $(e[0]);
                        form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                        style_edit_form(form);
                    }
                },
                {
                    //delete record form
                    url: '@Url.Action("Delete", "Member")',
                    recreateForm: true,
                    beforeShowForm: function (e) {
                        var form = $(e[0]);
                        if (form.data('styled')) return false;

                        form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                        style_delete_form(form);

                        form.data('styled', true);
                    },
                    onClick: function (e) {
                        alert(1);
                    },
                },
                {
                    //search form
                    recreateForm: true,
                    afterShowSearch: function (e) {
                        var form = $(e[0]);
                        form.closest('.ui-jqdialog').find('.ui-jqdialog-title').wrap('<div class="widget-header" />')
                        style_search_form(form);
                    },
                    afterRedraw: function () {
                        style_search_filters($(this));
                    },
                    multipleSearch: true,
                    /*
                    multipleGroup:true,
                    showQuery: true
                    */
                },
                {
                    //view record form
                    recreateForm: true,
                    beforeShowForm: function (e) {
                        var form = $(e[0]);
                        form.closest('.ui-jqdialog').find('.ui-jqdialog-title').wrap('<div class="widget-header" />')
                    }
                }
            )

            function style_edit_form(form) {
                //enable datepicker on "sdate" field and switches for "stock" field
                form.find('input[name=BirthdayCn]').datepicker({ format: 'yyyy-mm-dd', autoclose: true });
                form.find('input[name=BirthdayEn]').datepicker({ format: 'yyyy-mm-dd', autoclose: true });
                form.find('input[name=UserStatus]').addClass('ace ace-switch ace-switch-5').wrap('<label class="inline" />').after('<span class="lbl"></span>');

                //update buttons classes
                var buttons = form.next().find('.EditButton .fm-button');
                buttons.addClass('btn btn-sm').find('[class*="-icon"]').remove();//ui-icon, s-icon
                buttons.eq(0).addClass('btn-primary').prepend('<i class="icon-ok"></i>');
                buttons.eq(1).prepend('<i class="icon-remove"></i>')

                buttons = form.next().find('.navButton a');
                buttons.find('.ui-icon').remove();
                buttons.eq(0).append('<i class="icon-chevron-left"></i>');
                buttons.eq(1).append('<i class="icon-chevron-right"></i>');
            }

            function style_delete_form(form) {
                var buttons = form.next().find('.EditButton .fm-button');
                buttons.addClass('btn btn-sm').find('[class*="-icon"]').remove();//ui-icon, s-icon
                buttons.eq(0).addClass('btn-danger').prepend('<i class="icon-trash"></i>');
                buttons.eq(1).prepend('<i class="icon-remove"></i>')
            }

            function style_search_filters(form) {
                form.find('.delete-rule').val('X');
                form.find('.add-rule').addClass('btn btn-xs btn-primary');
                form.find('.add-group').addClass('btn btn-xs btn-success');
                form.find('.delete-group').addClass('btn btn-xs btn-danger');
            }

            function style_search_form(form) {
                var dialog = form.closest('.ui-jqdialog');
                var buttons = dialog.find('.EditTable')
                buttons.find('.EditButton a[id*="_reset"]').addClass('btn btn-sm btn-info').find('.ui-icon').attr('class', 'icon-retweet');
                buttons.find('.EditButton a[id*="_query"]').addClass('btn btn-sm btn-inverse').find('.ui-icon').attr('class', 'icon-comment-alt');
                buttons.find('.EditButton a[id*="_search"]').addClass('btn btn-sm btn-purple').find('.ui-icon').attr('class', 'icon-search');
            }

            function beforeDeleteCallback(e) {
                var form = $(e[0]);
                if (form.data('styled')) return false;

                form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                style_delete_form(form);

                form.data('styled', true);
            }

            function beforeEditCallback(e) {
                var form = $(e[0]);
                form.closest('.ui-jqdialog').find('.ui-jqdialog-titlebar').wrapInner('<div class="widget-header" />')
                style_edit_form(form);
            }

            //it causes some flicker when reloading or navigating grid
            //it may be possible to have some custom formatter to do this as the grid is being created to prevent this
            //or go back to default browser checkbox styles for the grid
            function styleCheckbox(table) {

                $(table).find('input:checkbox').addClass('ace')
                .wrap('<label />')
                .after('<span class="lbl align-top" />')


                $('.ui-jqgrid-labels th[id*="_cb"]:first-child')
                .find('input.cbox[type=checkbox]').addClass('ace')
                .wrap('<label />').after('<span class="lbl align-top" />');
            }

            //unlike navButtons icons, action icons in rows seem to be hard-coded
            //you can change them like this in here if you want
            function updateActionIcons(table) {

                var replacement =
                {
                    'ui-icon-pencil': 'icon-pencil blue',
                    'ui-icon-trash': 'icon-trash red',
                    'ui-icon-disk': 'icon-ok green',
                    'ui-icon-cancel': 'icon-remove red'
                };
                $(table).find('.ui-pg-div span.ui-icon').each(function () {
                    var icon = $(this);
                    var $class = $.trim(icon.attr('class').replace('ui-icon', ''));
                    if ($class in replacement) icon.attr('class', 'ui-icon ' + replacement[$class]);
                })

            }

            //replace icons with FontAwesome icons like above
            function updatePagerIcons(table) {
                var replacement =
                {
                    'ui-icon-seek-first': 'icon-double-angle-left bigger-140',
                    'ui-icon-seek-prev': 'icon-angle-left bigger-140',
                    'ui-icon-seek-next': 'icon-angle-right bigger-140',
                    'ui-icon-seek-end': 'icon-double-angle-right bigger-140'
                };
                $('.ui-pg-table:not(.navtable) > tbody > tr > .ui-pg-button > .ui-icon').each(function () {
                    var icon = $(this);
                    var $class = $.trim(icon.attr('class').replace('ui-icon', ''));

                    if ($class in replacement) icon.attr('class', 'ui-icon ' + replacement[$class]);
                })

                var x = $("#grid-pager_left").find("#coco");
                if (x.length == 0) {
                    $("#view_grid-table").after("<td class='ui-pg-button ui-corner-all' title data-original-title='Remove a row'><div id='coco'  class='ui-pg-div'>" +
                        "<span class='ui-icon icon-trash blue'></span></div></td>");
                }
            }

            function enableTooltips(table) {
                $('.navtable .ui-pg-button').tooltip({ container: 'body' });
                $(table).find('.ui-pg-div').tooltip({ container: 'body' });
            }

            //绑定事件 执行删除
            $("#grid-pager_left table tbody>tr").on("click", '#coco', function () {
                var selectedRowIds = $(grid_selector).jqGrid("getGridParam", "selarrrow");
                var len = selectedRowIds.length;
                if (len != 0) {
                    if (confirm("确定要删除选中项？")) {
                        for (var i = 0; i < len; i++) {
                            var rowData = $(grid_selector).jqGrid('getRowData', selectedRowIds[i]);
                            $.post('@Url.Action("Delete", "Member")', { id: rowData.MID }, function (data) {
                                $(grid_selector).jqGrid("delRowData", selectedRowIds[0]);
                            });
                        }
                    }
                } else {
                    //$.infoShow("未勾选", 0);
                    alert("未勾选");
                }
            });
            //var selr = jQuery(grid_selector).jqGrid('getGridParam','selrow');
        });
    </script>
}